Manasa is out on a hike with friends. She finds a trail of stones with numbers on them. She starts following the trail and notices that any two consecutive stones' numbers differ by one of two values. Legend has it that there is a treasure trove at the end of the trail. If Manasa can guess the value of the last stone, the treasure will be hers.

Example



She finds  stones and their differences are  or . We know she starts with a  stone not included in her count. The permutations of differences for the two stones are  or . Looking at each scenario, stones might have  or  on them. The last stone might have any of , or  on its face.

Compute all possible numbers that might occur on the last stone given a starting stone with a  on it, a number of additional stones found, and the possible differences between consecutive stones. Order the list ascending.

Function Description

Complete the stones function in the editor below.

stones has the following parameter(s):

int n: the number of non-zero stones
int a: one possible integer difference
int b: another possible integer difference
Returns

int[]: all possible values of the last stone, sorted ascending



//////////////////////////////////////////////////////////////////////////////// SOLUTION /////////////////////////////////////////////////////////////////////////////////////////////


#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'stones' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER a
#  3. INTEGER b
#


/////////////////////////////////////////////////////////////////////////////////////////////

def stones(n, a, b):
    # Write your code here
    
     return sorted(set([(n-1)*min(a, b) + x*abs(a-b) for x in range(n)]))
     
//////////////////////////////////////////////////////////////////////////////////////////////    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    T = int(input().strip())

    for T_itr in range(T):
        n = int(input().strip())

        a = int(input().strip())

        b = int(input().strip())

        result = stones(n, a, b)

        fptr.write(' '.join(map(str, result)))
        fptr.write('\n')

    fptr.close()
